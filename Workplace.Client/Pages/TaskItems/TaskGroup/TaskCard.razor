<div class="card border-primary border-3 task-card" @onclick="async () => await OnInfoHandler(TaskItem.Id)">
    <div class="card-header border-primary">
        <div class="row justify-content-between">
            <div class="col-auto">
                <h5 class="card-title">@TaskItem!.Name</h5>
            </div>
            <div class="col-auto">
                <button type="button" class="button-without-outline @FavoriteButtonClass" @onclick:stopPropagation="true" @onclick="async () => await OnFavoriteHandler(TaskItem.Id)">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-star-fill" viewBox="0 0 16 16">
                        <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
                    </svg>
                </button>
                <button type="button" class="button-without-outline @NotificationButtonClass" @onclick:stopPropagation="true" @onclick="async () => await OnNotificationHandler(TaskItem.Id)">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-bell-fill" viewBox="0 0 16 16">
                        <path d="M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2m.995-14.901a1 1 0 1 0-1.99 0A5 5 0 0 0 3 6c0 1.098-.5 6-2 7h14c-1.5-1-2-5.902-2-7 0-2.42-1.72-4.44-4.005-4.901" />
                    </svg>
                </button>
            </div>
        </div>
    </div>
    <div class="card-body">
        <small class="card-text ">
            @TaskItem.Description
        </small>
        <br />
        <small class="card-text">
            @TaskItem.StartTime!.Value.ToString("t") - @TaskItem.EndTime!.Value.ToString("t")
        </small>
        <br />
        <small class="card-text">
            @TaskItem.Location
        </small>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public TaskItemDTO? TaskItem { get; set; }

    public string FavoriteButtonClass
    {
        get
        {
            if (TaskItem!.IsFavorite)
            {
                return "btn btn-primary"; // добавить класс btn-primary, если IsFavorite равно true
            }

            return "btn btn-secondary"; // добавить класс btn-secondary, если IsFavorite равно false
        }
    }

    public string NotificationButtonClass
    {
        get
        {
            if (TaskItem!.IsNotification)
            {
                return "btn btn-primary"; // добавить класс btn-primary, если IsFavorite равно true
            }

            return "btn btn-secondary"; // добавить класс btn-secondary, если IsFavorite равно false
        }
    }

    [Parameter, EditorRequired]
    public EventCallback<int> OnFavorite { get; set; }
    
    [Parameter, EditorRequired]
    public EventCallback<int> OnNotification { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<int> OnUpdate { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<int> OnInfo { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<int> OnDelete { get; set; }

    async Task OnFavoriteHandler(int id)
    {
        await OnFavorite.InvokeAsync(id);
    }

    async Task OnNotificationHandler(int id)
    {
        await OnNotification.InvokeAsync(id);
    }

    async Task OnUpdateHandler(int id)
    {
        await OnUpdate.InvokeAsync(id);
    }

    async Task OnInfoHandler(int id)
    {
        await OnInfo.InvokeAsync(id);
    }

    async Task OnDeleteHandler(int id)
    {
        await OnDelete.InvokeAsync(id);
    }
}
