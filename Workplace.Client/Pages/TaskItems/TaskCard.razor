@inject IDataService data

<div class="card border-primary border-3 task-card" type="button" @onclick="HandleCardClick">
    <div class="card-header bg-transparent border-primary">
        <h5 class="card-title">@TaskItem!.Name</h5>
        <p class="card-text">@TaskItem!.Description</p>
    </div>
    <div class="card-body">
        @if (TaskItem.StartTime.HasValue && TaskItem.EndTime.HasValue)
        {
            <p class="card-text">
                Время: @TaskItem.StartTime!.Value.ToString("t") - @TaskItem.EndTime!.Value.ToString("t")
            </p>
        }
        @if (TaskItem.Location != string.Empty)
        {
            <p class="card-text">
                Место: @TaskItem.Location
            </p>
        }
    </div>
    <div class="card-footer bg-transparent border-primary">
        <button type="button" class="btn btn-primary" @onclick:stopPropagation="true" @onclick="async () => await OnUpdateHandler(TaskItem.Id)">Изменить</button>
        <button type="button" class="btn btn-danger" @onclick:stopPropagation="true" @onclick="async () => await OnDeleteHandler(TaskItem.Id)">Удалить</button>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public TaskItemDTO? TaskItem { get; set; }

    IEnumerable<TaskItemDTO>? tasks;

    protected override async Task OnParametersSetAsync()
    {
        tasks = await data.GetAllAsync();
    }

    [Parameter, EditorRequired]
    public EventCallback<int> OnUpdate { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<int> OnDelete { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<int> OnInfo { get; set; }

    async Task OnUpdateHandler(int id)
    {
        await OnUpdate.InvokeAsync(id);
    }

    async Task OnDeleteHandler(int id)
    {
        await OnDelete.InvokeAsync(id);
    }

    async Task OnInfoHandler(int id)
    {
        await OnInfo.InvokeAsync(id);
    }

    private async Task HandleCardClick()
    {
        if (TaskItem != null)
        {
            await OnInfoHandler(TaskItem.Id);
        }
    }
}
