@inject IDataService data
@inject NavigationManager nav

@page "/teacher/shedule/1/{Id:int}"

<PageTitle>@TaskItem!.Name</PageTitle>

<h3>@TaskItem!.Name</h3>

<ul class="list-group">
    <li class="list-group-item" aria-disabled="true">
        <label class="fw-bold" for="desc">@DisplayName(() => TaskItem!.Description)</label>
        <div id="desc">@TaskItem!.Description</div>
    </li>
    @if (TaskItem.StartTime.HasValue && TaskItem.EndTime.HasValue)
    {
        <li class="list-group-item" aria-disabled="true">
            <label class="fw-bold" for="time">Время проведения</label>
            <div id="time"> @TaskItem.StartTime.Value.ToString("t") - @TaskItem.EndTime.Value.ToString("t")</div>
        </li>
    }
    <li class="list-group-item" aria-disabled="true">
        <label class="fw-bold" for="loc">@DisplayName(() => TaskItem!.Location)</label>
        <div id="loc">@TaskItem!.Location</div>
    </li>
</ul>
<br />
<button type="button" class="btn btn-success" @onclick="async () => await Forward(Id)">Сгенерировать QR-код</button>
<button type="button" class="btn btn-secondary" @onclick="async () => await Back()">Закрыть</button>

@code {
    [Parameter]
    public int Id { get; set; }

    TaskItemDTO? TaskItem;

    protected override async Task OnParametersSetAsync()
    {
        TaskItem = await data.GetTaskItemAsync(Id);
    }

    async Task Forward(int id)
    {
        await Task.Run(() => nav.NavigateTo($"/teacher/shedule/2/{id}"));
    }

    async Task Back()
    {
        await Task.Run(() => nav.NavigateTo("/teacher"));
    }
}
