@inject IDataService data
@inject NavigationManager nav

@page "/student"

<PageTitle>Список задач</PageTitle>

<h3>Список задач</h3>

<StudentModal @ref="Modal"></StudentModal>

<div class="row">
    <div class="col-auto">
        <button type="button" class="btn btn-success">
            Новая задача
        </button>
    </div>
    <div class="col-auto">
        <button type="button" class="btn btn-secondary">
            Фильтры
        </button>
    </div>   
</div>
<br />
<div class="accordion">
    @for (int i = 0; i < 3; i++)
    {
        <div class="accordion-item border-primary">
            <div class="accordion-header">
                <button type="button" class="accordion-button @AccordStyle" @onclick="ToggleVisibility">
                    <h3>
                        День
                    </h3>
                </button>
            </div>
            @if (ShowTasks)
            {
                <div class="accordion-body vertical-card-group">
                    @for (int j = 0; j < 3; j++)
                    {
                        <div class="card border-primary border-3 task-card" @onclick="async () => await OnInfoHandler(TaskItem)">
                            <div class="card-header border-primary">
                                <div class="row justify-content-between">
                                    <div class="col-auto">
                                        <h5 class="card-title">@TaskItem!.Name</h5>
                                    </div>
                                    <div class="col-auto">
                                        <button type="button" class="button-without-outline btn btn-primary" @onclick:stopPropagation="true">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-star-fill" viewBox="0 0 16 16">
                                                <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
                                            </svg>
                                        </button>
                                        <button type="button" class="button-without-outline btn btn-secondary" @onclick:stopPropagation="true">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-bell-fill" viewBox="0 0 16 16">
                                                <path d="M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2m.995-14.901a1 1 0 1 0-1.99 0A5 5 0 0 0 3 6c0 1.098-.5 6-2 7h14c-1.5-1-2-5.902-2-7 0-2.42-1.72-4.44-4.005-4.901" />
                                            </svg>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <small class="card-text ">
                                    @TaskItem.Description
                                </small>
                                <br />
                                <small class="card-text">
                                    @TaskItem.StartTime!.Value.ToString("t") - @TaskItem.EndTime!.Value.ToString("t")
                                </small>
                                <br />
                                <small class="card-text">
                                    @TaskItem.Location
                                </small>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    StudentModal? Modal { get; set; }

    TaskItemDTO? TaskItem;

    public bool ShowTasks = true;

    private string? AccordStyle;

    protected override async Task OnParametersSetAsync()
    {
        TaskItem = await data.GetTaskItemAsync(4);
    }

    protected override void OnInitialized()
    {
        if (ShowTasks)
        {
            AccordStyle = "";
        }
        else
        {
            AccordStyle = "collapsed";
        }
    }

    private void ToggleVisibility()
    {
        ShowTasks = !ShowTasks;
        if (ShowTasks)
        {
            AccordStyle = "";
        }
        else
        {
            AccordStyle = "collapsed";
        }
    }

    async Task OnInfoHandler(TaskItemDTO taskItem)
    {
        await Task.Run(() => nav.NavigateTo($"/student/shedule/1/{taskItem.Id}"));
        //await Task.Run(() => Modal!.Open(taskItem));
    }
}