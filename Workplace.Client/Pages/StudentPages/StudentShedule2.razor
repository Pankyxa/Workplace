@inject IDataService data
@inject NavigationManager nav

@page "/student/shedule/2/{Id:int}"

<PageTitle>@TaskItem!.Name</PageTitle>

<h3>Укажите причину отказа</h3>

<EditForm Model="reason" OnValidSubmit="Forward" id="CancelForm">
    <DataAnnotationsValidator />
    <InputSelect class="form-control" @bind-Value=reason.Reason id="reason">
        <option value="ILLNESS">Больничный</option>
        <option value="ATTENDING_EVENT">Посещение мероприятия</option>
        <option value="PERSONAL_REASONS">Личные причины</option>
        <option value="OTHERS">Другое</option>
    </InputSelect>
    <ValidationMessage For="@(() => reason!.Reason)" />
</EditForm>
<br />
<button type="submit" form="CancelForm" class="btn btn-primary">Отправить</button>
<button type="reset" form="CancelForm" class="btn btn-secondary" @onclick="async () => await Back(Id)">Назад</button>

@code {
    [Parameter]
    public int Id { get; set; }

    TaskItemDTO? TaskItem;

    ReasonModel reason = new ReasonModel();

    public class ReasonModel
    {
        [Display(Name = "Причина")]
        [Required(ErrorMessage = "Требуется указать причину")]
        public Reason Reason { get; set; }
    }
    public enum Reason
    {
        ILLNESS,
        ATTENDING_EVENT,
        PERSONAL_REASONS,
        OTHERS
    }

    protected override async Task OnParametersSetAsync()
    {
        TaskItem = await data.GetTaskItemAsync(Id);
    }

    async Task Forward()
    {
        await Task.Run(() => nav.NavigateTo("/student"));
    }

    async Task Back(int id)
    {
        await Task.Run(() => nav.NavigateTo($"/student/shedule/1/{id}"));
    }
}
