<Modal @ref="Modal">
    <Title>
        @if (ModalContent == "Shedule")
        {
            @TaskItem!.Name
        }
        @if (ModalContent == "Cancel")
        {
            <label>Укажите причину отказа</label>
        }
    </Title>
    <Body>
        @if (ModalContent == "Shedule")
        {
            <ul class="list-group">
                <li class="list-group-item" aria-disabled="true">
                    <label class="fw-bold" for="desc">@DisplayName(() => TaskItem!.Description)</label>
                    <div id="desc">@TaskItem!.Description</div>
                </li>
                <li class="list-group-item" aria-disabled="true">
                    <label class="fw-bold" for="teacher">@DisplayName(() => TaskItem!.Teacher)</label>
                    <div id="teacher">@TaskItem!.Teacher</div>
                </li>
                @if (TaskItem.StartTime.HasValue && TaskItem.EndTime.HasValue)
                {
                    <li class="list-group-item" aria-disabled="true">
                        <label class="fw-bold" for="time">Время проведения</label>
                        <div id="time"> @TaskItem.StartTime.Value.ToString("t") - @TaskItem.EndTime.Value.ToString("t")</div>
                    </li>
                }
                <li class="list-group-item" aria-disabled="true">
                    <label class="fw-bold" for="loc">@DisplayName(() => TaskItem!.Location)</label>
                    <div id="loc">@TaskItem!.Location</div>
                </li>
            </ul>
        }
        @if (ModalContent == "Cancel")
        {
            <EditForm Model="reason" OnValidSubmit="Submit" id="CancelForm">
                <DataAnnotationsValidator />
                <InputSelect class="form-control" @bind-Value=reason.Reason id="reason">
                    <option value="ILLNESS">Больничный</option>
                    <option value="ATTENDING_EVENTS">Посещение мероприятий</option>
                    <option value="PERSONAL_REASONS">Личные причины</option>
                    <option value="OTHERS">Другое</option>
                </InputSelect>
                <ValidationMessage For="@(() => reason!.Reason)" />
            </EditForm>
        }
    </Body>
    <Footer>
        @if (ModalContent == "Shedule")
        {
            <button type="button" class="btn btn-success" @onclick="Close">Выполнить</button>
            <button type="button" class="btn btn-danger" @onclick="ToCancelForm">Отказаться</button>
            <button type="button" class="btn btn-secondary" @onclick="Close">Закрыть</button>
        }
        @if (ModalContent == "Cancel")
        {
            <button type="submit" form="CancelForm" class="btn btn-primary">Отправить</button>
            <button type="reset" form="CancelForm" class="btn btn-secondary" @onclick="ToShedule">Назад</button>
        }

    </Footer>
</Modal>

@code {
    Modal? Modal { get; set; }

    string? ModalContent;

    TaskItemDTO? TaskItem = new();

    ReasonModel reason = new ReasonModel();

    public class ReasonModel
    {
        [Display(Name = "Причина")]
        [Required(ErrorMessage = "Требуется указать причину")]
        public Reason Reason { get; set; }
    }
    public enum Reason
    {
        ILLNESS,
        ATTENDING_EVENTS,
        PERSONAL_REASONS,
        OTHERS
    }
    public async Task Open(TaskItemDTO taskItem)
    {
        ModalContent = "Shedule";
        TaskItem = await Task.Run(() => Clone(taskItem));
        await Task.Run(() => Modal!.Open());
    }

    async Task Close()
    {
        await Task.Run(() => Modal!.Close());
    }

    void ToShedule()
    {
        ModalContent = "Shedule";
    }

    void ToCancelForm()
    {
        ModalContent = "Cancel";
    }

    async Task Submit()
    {
        await Task.Run(() => Modal!.Close());
    }

    TaskItemDTO Clone(TaskItemDTO taskItem)
    {
        TaskItemDTO taskCopy = new();
        taskCopy!.Id = taskItem.Id;
        taskCopy!.Name = taskItem.Name;
        taskCopy!.Description = taskItem.Description;
        taskCopy!.StartTime = taskItem.StartTime;
        taskCopy!.EndTime = taskItem.EndTime;
        taskCopy!.Location = taskItem.Location;
        taskCopy!.Teacher = taskItem.Teacher;
        return taskCopy;
    }
}